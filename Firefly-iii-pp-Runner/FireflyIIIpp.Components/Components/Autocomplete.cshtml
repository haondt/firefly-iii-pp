@model FireflyIIIpp.Components.Components.AutocompleteModel

<div class="control autocomplete is-flex is-flex-direction-column">
    <input class="input" type="text" 
        @(Model.Name.HasValue ? Html.Raw($"name=\"{Model.Name.Value}\"") : "")
        @(Model.Id.HasValue ? Html.Raw($"id=\"{Model.Id.Value}\"") : "")
        @(Model.Placeholder.HasValue ? Html.Raw($"placeholder=\"{Model.Placeholder.Value}\"") : "")
        _="
            on input debounced at 200ms
                send focus to me
            end
            on focus
                add .is-active to the next .dropdown 
                send update to the next .dropdown
            end
            on focusout
                remove .is-active from the next .dropdown
                set (the next .dropdown-content)'s innerHTML to ''
            end
            on keydown
                if the event's key is 'Enter'
                    if (the next <.dropdown-item.is-active />) is not null
                        set my value to (the next <.dropdown-item.is-active/>)'s innerHTML
                        send focusout to me
                    end
                end
                if the event's key is 'ArrowDown'
                    halt the event
                    if (the next <.dropdown-item.is-active />) is null
                        if (the next <.dropdown-item />) is not null
                            add .is-active to the next .dropdown-item
                        end
                    else
                        if (the next <.dropdown-item.is-active + .dropdown-item/>) is not null
                            add .is-active to the next <.dropdown-item.is-active + .dropdown-item/>
                            remove .is-active from the next <.dropdown-item.is-active/>
                        end
                    end
                end
                if the event's key is 'ArrowUp'
                    halt the event
                    if (the next <.dropdown-item.is-active />) is not null
                        if (the next <.dropdown-item:has(+ .dropdown-item.is-active)/>) is not null
                            add .is-active to the next <.dropdown-item:has(+ .dropdown-item.is-active)/>
                            remove .is-active from the next <.dropdown-item.is-active + .dropdown-item.is-active/>
                        end
                    end
                end
            end
        ">
    <div 
        class="dropdown" 
        hx-trigger="update" 
        hx-post="/_event/@Html.Raw(Model.SuggestionEvent)" 
        hx-swap="innerHTML" 
        hx-include="@Html.Raw(Model.HxIncludeString)"
        hx-target="find .dropdown-content">
        <div class="dropdown-menu">
            <div class="dropdown-content"></div>
        </div>
    </div>
</div>
